// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Admin
  User
}

model Users {
  userId      String         @id @default(cuid())
  name        String
  email       String         @unique
  phoneNumber String?
  picture     String?        @default("https://res.cloudinary.com/dr1giexhn/image/upload/v1715435659/userProfile/pfp_ehyg3e.png")
  password    String?
  location    String?
  role        Role           @default(User)
  updatedAt   DateTime       @updatedAt()
  createdAt   DateTime       @default(now())
  wishlist    WishListItem[]
  review      Review[]
}

enum Gender {
  Men
  Women
}

model Products {
  productId   String            @id @default(cuid())
  name        String
  description String
  price       Float
  gender      Gender
  categoryId  String
  isDeleted   Boolean           @default(false)
  view        Boolean           @default(true)
  updatedAt   DateTime          @updatedAt()
  createdAt   DateTime          @default(now())
  category    Categories        @relation(fields: [categoryId], references: [categoryId])
  variants    ProductVariants[]
  orderItem   OrderItems[]
  wishlist    WishListItem[]
  review      Review[]
}

model Categories {
  categoryId   String     @id @default(cuid())
  categoryName String
  products     Products[]
}

model ProductVariants {
  variantId String          @id @default(cuid())
  color     String
  product   Products        @relation(fields: [productId], references: [productId])
  productId String
  sizes     ProductSizes[]
  images    ProductImages[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  orderItem OrderItems[]
}

model ProductSizes {
  sizeId    String          @id @default(cuid())
  size      String
  stock     Int
  variant   ProductVariants @relation(fields: [variantId], references: [variantId])
  variantId String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  orderItem OrderItems[]
}

model ProductImages {
  productImageId String          @id @default(cuid())
  url            String
  variant        ProductVariants @relation(fields: [variantId], references: [variantId])
  variantId      String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Orders {
  orderId       String         @id @default(cuid())
  userName      String
  email         String
  phoneNumber   Int
  location      String
  pidx          String?
  paymentMethod PaymentMethod?
  orderItems    OrderItems[]
  totalPrice    Float
  status        OrderStatus    @default(Pending)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt()
}

enum OrderStatus {
  Pending
  Confirmed
  Shipped
  Delivered
  Cancelled
}

enum PaymentMethod {
  Khalti
  Esewa
}

model OrderItems {
  orderItemId String          @id @default(cuid())
  order       Orders          @relation(fields: [orderId], references: [orderId])
  orderId     String
  product     Products        @relation(fields: [productId], references: [productId])
  productId   String
  variant     ProductVariants @relation(fields: [variantId], references: [variantId])
  variantId   String
  size        ProductSizes    @relation(fields: [sizeId], references: [sizeId])
  sizeId      String
  quantity    Int
  price       Float
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt()
}

model WishListItem {
  wishListId String   @id @default(cuid())
  userId     String
  productId  String
  user       Users    @relation(fields: [userId], references: [userId])
  product    Products @relation(fields: [productId], references: [productId])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()

  @@unique([userId, productId])
}

model Review {
  reviewId  String   @id @default(cuid())
  rating    Int
  comment   String
  productId String
  userId    String
  user      Users    @relation(fields: [userId], references: [userId])
  product   Products @relation(fields: [productId], references: [productId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}
